pipeline {

   agent any


    stages {
        stage('Build') {
            when {
                changeset "**/worker/**"
            }
            agent {
              docker {
                image 'maven:3-alpine'
                args '-v $HOME/.m2:/root/.m2'
              }
            }
            steps {
                echo 'Building..'
                dir('worker'){
                  sh 'mvn compile'
                }
            }
            }

        stage('Test') {
            when {
	    	 changeset "**/worker/**"
            }
            agent {
              docker {
                image 'maven:3-alpine'
                args '-v $HOME/.m2:/root/.m2'
              }
            }
            steps {
                echo 'Testing..'
                dir('worker'){
                  sh 'mvn test'
                }
            }
        }

        stage('Sonarqube') {
            when {
                 changeset "**/worker/**"
                 branch 'master'
            }
            agent any
            environment{
              sonarpath = tool 'SonarScanner'
            }
            steps {
                echo 'Running Sonarqube Analysis..'
                  withSonarQubeEnv('sonar') {
                    sh "${sonarpath}/bin/sonar-scanner -Dproject.settings=worker/sonar-project.properties"
                  }
            }
        }

        stage('Package') {
            when {
	    	 changeset "**/worker/**"
            }
            agent {
              docker {
                image 'maven:3-alpine'
                args '-v $HOME/.m2:/root/.m2'
              }
            }
            steps {
                echo 'Packaging....'
                dir('worker'){
                  sh 'mvn package -DskipTests'
                  archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
               }
            }
        }

        stage('Package with Docker') {
            when {
	    	 changeset "**/worker/**"
            }
            agent any
            steps {
                echo 'Building and Publishing Docker Image'
                script {
                  docker.withRegistry('https://index.docker.io/v1/', 'dockerhub') {
                    def customImage = docker.build("initcron/worker:${env.BRANCH_NAME}-v${env.BUILD_ID}", "./worker")
                    customImage.push("${env.BRANCH_NAME}")
                    customImage.push()
                  }
                }
            }
        }
    }
}
